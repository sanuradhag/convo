//.animation-text {
//
//  margin-bottom: 20px;
//
//  .convo {
//    //display:inline-block;
//    //overflow:hidden;
//    //white-space:nowrap;
//    animation: showup 8s infinite;
//    font-family: monospace;
//    font-size: 100px;
//    font-weight: 700;
//    margin-right: 5px;
//  }
//
//  .desc {
//    display:inline-block;
//    overflow:hidden;
//    white-space:nowrap;
//    width:0px;
//    animation: reveal 8s infinite;
//    margin-bottom: 10px;
//
//    .text {
//      margin-left:-355px;
//      animation: slidein 16s infinite;
//      font-size: 20px;
//    }
//  }
//}
//
//@keyframes showup {
//  0% {opacity:0;}
//  20% {opacity:1;}
//  80% {opacity:1;}
//  100% {opacity:0;}
//}
//
//@keyframes slidein {
//  0% { margin-left:-800px; }
//  20% { margin-left:-800px; }
//  35% { margin-left:0px; }
//  100% { margin-left:0px; }
//}
//
//@keyframes reveal {
//  0% {opacity:0;width:0px;}
//  20% {opacity:1;width:0px;}
//  30% {width:385px;}
//  80% {opacity:1;}
//  100% {opacity:0;width:385px;}
//}


$colors: (
        background: #282c34,
        text: white
);

$font: (
        family: monospace,
        size: 100px,
        letter-spacing: 0,
        weight: 700
);

$config: (
        animated: false,
        nb-letters: 16,
        animation-length: 5s,
        mask-letters: ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
);

@function color($value) {
  @return map-get($colors, $value);
}

@function font($value) {
  @return map-get($font, $value);
}

@function config($value) {
  @return map-get($config, $value);
}

@function random-string($list) {
  $result: null;
  @for $i from 1 through length($list) {
    $random: random(length($list));
    $current: nth($list, $random);
    $list: remove-nth($list, $random);
    $result: $result#{$current};
  }
  @return $result;
}

@function remove-nth($list, $index) {
  $result: ();
  @for $i from 1 through length($list) {
    @if $i != $index {
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

@mixin respond-to($breakpoint) {
  @if type-of($breakpoint) == list {
    @media (min-width: nth($breakpoint, 1)) and (max-width: nth($breakpoint, 2)) {
      @content;
    }
  }
  @else {
    @media (max-width: $breakpoint) {
      @content;
    }
  }
}


.animation-text {
  position: absolute;
  top: 5%;
  left: 50%;
  width: 70%;
  font-size: 0;
  transform: translate(-50%);

  p {
    font-family: font(family);
    font-size: 20px;
    font-weight: 500;
    color: white;
    opacity: 0.6;
  }

  .letter {
    width: font(size);
    display: inline-block;
    vertical-align: middle;
    position: relative;
    overflow: hidden;
    margin: 0 ceil(font(letter-spacing) / 2);
    font-family: font(family);
    font-size: font(size);
    font-weight: 600;
    line-height: font(size);
    text-transform: uppercase;
    color: white;
    @include respond-to(625px) {
      //font-size: 16px;
      //width: 18px;
    }
    &:before {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      word-break: break-all;
      background-color: color(background);
    }
  }
}

@for $i from 1 through config(nb-letters) {
  $length: length(config(mask-letters));
  $random: random($length);
  $steps: $random - 1;
  $offset: font(size) * $steps * -1;
  $delay: random(100) / 100;
  $duration: $steps * (config(animation-length) / $random);
  .letter:nth-child(#{$i}):before {
    content: quote(random-string(config(mask-letters)));
    margin-top: $offset;
    animation-name: letter#{$i};
    animation-duration: $duration - ($duration * $delay);
    animation-delay: $delay * 1s;
    animation-fill-mode: forwards;
  }
  @keyframes letter#{$i} {
    from {
      margin-top: $offset;
    }
    to {
      margin-top: font(size);
    }
  }
}



// ----------------------------------

